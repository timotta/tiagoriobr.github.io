<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
    <title>title</title>
    <subtitle>subtitle</subtitle>
    <link rel="alternate" href="/" />
    <link rel="self" href="/feed.xml" type="application/atom+xml" />
    <id>/</id>
    <updated>2023-04-27T02:21:20Z</updated>

    <author>
        <name>author</name>
        
        <uri>/</uri>
    </author>

    
        <entry>
            <title>A fantástica fábrica de widgets</title>
            <link rel="alternate" href="/2023/04/27/a-fantastica-fabrica-de-widgets/" type="text/html" />
            <id>/2023/04/27/a-fantastica-fabrica-de-widgets/</id>
            <updated>2023-04-27T02:10:32Z</updated>

            <summary type="html">Ess história aqui demonstra como a falta de flexibilidade e autonomia na infra estrutura de peodução pode gerar belas gambiarras.</summary>
            <content type="html">&lt;p&gt;Ess história aqui demonstra como a falta de flexibilidade e autonomia na infra estrutura de peodução pode gerar belas gambiarras.&lt;/p&gt;

&lt;p&gt;Na Globo.com tinhamos diversos sites diferentes, o G1 de noticias, Ge de esportes, Ego, Entretenimento (na época não havia GShow). Em geral esses sites exibiam apenas noíticias na época, e todo acervo de vídeos estava concentrado num produto chamado GMC, globo media center.&lt;/p&gt;

&lt;p&gt;A idéia era acabar com esse silo, provendo uma maneira simples dos produtos oferecerem os videos cadastrados no GMC. Uma API (que chamavamos de WebmediaAPI) já estava disponível, mas ela não padronizava a exibição dessas ofertas de conteúdo.&lt;/p&gt;

&lt;p&gt;A solução proposta seria desenvolvermos widgets para que os desenvolvedores de cada site pudessem instanciar em suas homes. Esses widgets seriam ofertas como videos recentes, mais vistos, melhor avaliados, com possibilidade de diversos filtros e algumas opções de layout.&lt;/p&gt;

&lt;p&gt;Naquele tempo os sites da Globo.com usavam uma plataforma chamada vignette que estatizava todo seu conteudo. As materias eram html estaticos gerados após cada publicação, e as homes idem. Era necessario uma publicação do editor para ela alterar.&lt;/p&gt;

&lt;p&gt;Isso ia contra a dinamicidade do conteúdo de videos. Como manter um mais vistos de uma determinada categoria por exemplo, ecologia, em uma materia estatizada?&lt;/p&gt;

&lt;p&gt;Uma maneira seria usar server side include, visto que os arquivos estaticos eram servidos pelo apache. Mas, infelizmente havia muitas restrições para fazer qualquer mudança em infra estrutura na globo.com naquela época.&lt;/p&gt;

&lt;p&gt;Nos sobrou então fazer widgets client side. Contudo, requisições cross domain para obter as informações da WebmediaApi só seriam possiveis se pudessemos prover os headers necessários de CORS. Mas pra fazer isso também seria necessário mudanças na infra visto que a camada (apache) na frente da WebmediaApi também era rígida, fora de nosso controle e trocava todos os headers.&lt;/p&gt;

&lt;p&gt;Nossa solução final foi permitir à webmedia api retornar o seu conteudo com uma chamada a uma função callback fornecida.&lt;/p&gt;

&lt;p&gt;Tinhamos um javascript com o codigo do widget e este javascript incluia outro &amp;ldquo;javascript&amp;rdquo; que era a chamada à WebmediaAPI mandando como parametro uma função dinamica. Essa função recebia o conteudo da WebmediaApi e renderizava o widget escolhido e customizado.&lt;/p&gt;

&lt;p&gt;Havia até um controle de timeout em caso de demora pro callback responder utilizando o setTimeout do javascript.&lt;/p&gt;

&lt;p&gt;Isso resolveu nosso problema e por alguns sprints fizemos uma verdadeira fabrica de widgets. As necessidades e ideias vinham e a gente gerava widget e filtros necessarios na webmediaapi. Foi um sucesso.&lt;/p&gt;

&lt;p&gt;Até que resolvemos fazer o Globo Videos. Site sucessor e condensador de todoss os videos que também estariam espalhados nos outros sites. Oras, com todos os widgets, seria simples criar o site. Bastariamos encaixá-los em algumas páginas e correr pro abraço.&lt;/p&gt;

&lt;p&gt;Mas havia um porém&amp;hellip;&lt;/p&gt;

&lt;p&gt;Naquela época o google não indexava páginas renderizadas via javascript. E precisávamos que ao menos o Globo Videos renderizasse no servidor.&lt;/p&gt;

&lt;p&gt;A solução: passamos a renderizar os widgets feitos em javascript no servidor. Como tudo no vignette era java, tivemos que renderizar usandl Rhino (antes do java 1.5 só dava pra renderizar javascript assim).&lt;/p&gt;

&lt;p&gt;Para manter o frescor dos dados as homes do globo videos passaram a ser renderizadas no servidor a cada X tempos. Eu não lembro se essa publicação automatica tinha sido feita via cron ou via alguma ferramenta do vignette, mas o ponto é que o html estático passou a ser gerado frequentemente, com o html dos widgets.&lt;/p&gt;

&lt;p&gt;As paginas dos videos continuaram exibindo os widgets client side pois seria impraticavel renderizar milhoes de html frequentemente.&lt;/p&gt;

&lt;p&gt;Uma dificuldade adicional dessa solução foi que tudo na globo.com na epoca rodava em um weblogic, e ele já possuia uma Rhino versão velha dentro dele que se sobrepunha ao nosso Rhino versão mais nova. Para renderizar então os widgets foi necessário executar os codigo instanciando um outro classloader.&lt;/p&gt;
</content>
        </entry>
    
</feed>